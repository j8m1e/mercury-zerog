[include mainsail.cfg]
[include klicky-probe.cfg]
[include TEST_SPEED.cfg]
#[include accelerometer.cfg]

[skew_correction]

[virtual_sdcard]
path: /home/blinkem/mercury_data/gcodes
on_error_gcode: CANCEL_PRINT

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[printer]
kinematics: corexy
max_velocity: 600
max_accel: 6400
max_accel_to_decel: 5000
max_z_velocity: 25
max_z_accel: 30
square_corner_velocity: 7


[stepper_x]
step_pin: PE2
dir_pin: PE3
enable_pin: !PE4
microsteps: 32
full_steps_per_rotation: 200
rotation_distance: 39.972
endstop_pin: !PG10
position_endstop: -20
position_min: -20
position_max: 310 # for bed mesh
homing_speed: 50
homing_retract_dist: 10
second_homing_speed: 10.0

[stepper_y]
step_pin: PE5
dir_pin: PE6
enable_pin: !PC13
microsteps: 32
full_steps_per_rotation: 200
rotation_distance: 39.984
endstop_pin: !PA12
position_min: -70
position_endstop: 288
position_max: 288
homing_retract_dist: 10
homing_speed: 50.0
second_homing_speed: 10.0

[stepper_z]
step_pin: PB9
dir_pin: PE0
enable_pin: !PE1
microsteps: 32
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_max: 400
position_min: -2
homing_speed: 50
homing_retract_dist: 10
second_homing_speed: 10.0

[extruder]
step_pin: PB4
dir_pin: PB5
enable_pin: !PB8
microsteps: 32
full_steps_per_rotation: 200
rotation_distance: 22.5
gear_ratio: 50:10
nozzle_diameter: 0.600
filament_diameter: 1.750
heater_pin: PG12
sensor_type: ATC Semitec 104GT-2
sensor_pin: PA1
control: pid
pid_Kp: 18.831
pid_Ki: 0.821
pid_Kd: 108.044
min_temp: 0
max_temp: 260
pressure_advance: 0.02
max_extrude_only_distance: 250

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 90.8
shaper_type_y = zv
shaper_freq_y = 40.4

[heater_bed]
heater_pin: PG11
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
min_temp: 0
max_temp: 130
control: pid
pid_Kp: 73.932
pid_Ki: 1.521
pid_Kd: 898.279

[heater_fan hotend_fan]
pin: PG14

[fan]
pin: PG13

[controller_fan drivers_fan]
pin: PD6
max_power: 1
off_below: 0.7
hardware_pwm: False
cycle_time: 0.5
shutdown_speed: 0


[filament_switch_sensor filament_sensor]
pause_on_runout: True
runout_gcode:
  M600
switch_pin: !PA15

[output_pin beeper]
pin: PB0

[force_move]
enable_force_move: True



[bed_screws]
screw1: 5, 5
screw2: 165, 5
screw3: 325, 5
screw4: 5, 325
screw5: 165, 325
screw6: 325, 325

[bed_mesh]
speed: 150
probe_count: 6,6
horizontal_move_z: 5
algorithm: bicubic
bicubic_tension: 0.2
mesh_min : 20, 20
mesh_max : 250, 250
mesh_pps: 3,3
adaptive_margin: 5

[probe]
x_offset: -27
y_offset: -22
pin: PG9
speed: 10
#z_offset: 1


[exclude_object]





[gcode_arcs]
#resolution: 1.0
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.

[gcode_macro START_PRINT]
gcode:
	{% set BED_TEMP=params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP=params.EXTRUDER_TEMP|default(190)|float %}
	
	# Home the printer
	G90
	M83
	G28
	
	# Preheat the bed
	M140 S{BED_TEMP}
	M190 S{BED_TEMP}
	M104 S190
	
	# Z probing sequence
	BED_MESH_CALIBRATE ADAPTIVE=1
	BED_MESH_PROFILE LOAD=default
	
	# Heat the extruder to the desired temperature
	M104 S{EXTRUDER_TEMP}
	M109 S{EXTRUDER_TEMP}
	
	# Prime line sequence
	G1 Z5 F3000 ; lift
	G1 X20 Y5 F1500 ; move to prime position
	G1 Z0.15 F3000 ; get ready to prime
	G92 E0 ; reset extrusion distance
	G1 X100 E30 F600 ; prime nozzle with adjusted extrusion / E__ based on how much you like
	
	# String removal circle after priming
	G1 Z0.2 F3000 ; adjust to 0.2mm above the bed
	G1 Y15 F10000 ; move the toolhead in the Y direction by 15 units
	
	# Execute the circle 3 times
	G2 I-5 J0 F10000 ; circle with 5mm radius
	G2 I-5 J0 F10000
	G2 I-5 J0 F10000





[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}
    
    [gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}


[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    #SET_FAN_SPEED FAN=Exhaust SPEED=0   ; turn exhaust fan off
    #SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    #SET_PIN PIN=caselight VALUE=0       ; turn case light off

[gcode_macro PARKFRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe]
#*# z_offset = 1.035
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	0.135000, 0.077500, 0.021250, -0.035000, -0.057500, -0.106250
#*# 	0.131250, 0.106250, 0.048750, -0.008750, -0.055000, -0.111250
#*# 	0.137500, 0.102500, 0.046250, -0.017500, -0.075000, -0.143750
#*# 	0.106250, 0.083750, 0.030000, -0.021250, -0.076250, -0.152500
#*# 	0.090000, 0.051250, -0.012500, -0.061250, -0.111250, -0.181250
#*# 	0.102500, 0.030000, -0.037500, -0.100000, -0.151250, -0.230000
#*# x_count = 6
#*# y_count = 6
#*# mesh_x_pps = 3
#*# mesh_y_pps = 3
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 20.0
#*# max_x = 250.0
#*# min_y = 20.0
#*# max_y = 250.0
#*#
#*# [skew_correction my_skew_profile]
#*# xy_skew = 0.002303129847937827
#*# xz_skew = 0.0
#*# yz_skew = 0.0
